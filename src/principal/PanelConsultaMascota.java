/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package principal;

import beans.HistorialClinico;
import beans.Mascota;
import java.awt.Component;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.Socket;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import static principal.FrPrincipal.IP;
import static principal.FrPrincipal.PUERTO;
import static principal.FrPrincipal.in;
import static principal.FrPrincipal.inObj;
import static principal.FrPrincipal.out;
import static principal.FrPrincipal.panelAltaCliente;
import static principal.FrPrincipal.panelAltaHistorial;
import static principal.FrPrincipal.sc;
import static principal.FrPrincipal.panelAltaMascota;
import static principal.FrPrincipal.panelBienvenida;
import static principal.FrPrincipal.panelConsultaCita;
import static principal.FrPrincipal.panelConsultaCliente;
import static principal.FrPrincipal.panelConsultaHistorial;
import static principal.FrPrincipal.panelConsultaMascota;
import static principal.FrPrincipal.panelDetalleCita;
import static principal.FrPrincipal.panelFactura;

/**
 *
 * @author Alex
 */
public class PanelConsultaMascota extends javax.swing.JPanel {

    public PanelConsultaMascota() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupMascota = new javax.swing.ButtonGroup();
        btnConsultaHistorial = new javax.swing.JButton();
        btnCrearHistorial = new javax.swing.JButton();
        btnBaja = new javax.swing.JButton();
        rbPorClientes = new javax.swing.JRadioButton();
        rbLista = new javax.swing.JRadioButton();
        txtFiltro = new javax.swing.JTextField();
        btnFiltrar = new javax.swing.JButton();
        scrollMascota = new javax.swing.JScrollPane();
        tablaMascota = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 153));

        btnConsultaHistorial.setBackground(new java.awt.Color(0, 102, 102));
        btnConsultaHistorial.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnConsultaHistorial.setForeground(new java.awt.Color(255, 255, 255));
        btnConsultaHistorial.setText("CONSULTA HISTORIAL");
        btnConsultaHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaHistorialActionPerformed(evt);
            }
        });

        btnCrearHistorial.setBackground(new java.awt.Color(0, 102, 102));
        btnCrearHistorial.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCrearHistorial.setForeground(new java.awt.Color(255, 255, 255));
        btnCrearHistorial.setText("AÃ‘ADIR A HISTORIAL");
        btnCrearHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearHistorialActionPerformed(evt);
            }
        });

        btnBaja.setBackground(new java.awt.Color(0, 102, 102));
        btnBaja.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBaja.setForeground(new java.awt.Color(255, 255, 255));
        btnBaja.setText("BAJA");
        btnBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBajaActionPerformed(evt);
            }
        });

        rbPorClientes.setBackground(new java.awt.Color(0, 153, 153));
        buttonGroupMascota.add(rbPorClientes);
        rbPorClientes.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        rbPorClientes.setForeground(new java.awt.Color(255, 255, 255));
        rbPorClientes.setText("Por clientes");
        rbPorClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPorClientesActionPerformed(evt);
            }
        });

        rbLista.setBackground(new java.awt.Color(0, 153, 153));
        buttonGroupMascota.add(rbLista);
        rbLista.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        rbLista.setForeground(new java.awt.Color(255, 255, 255));
        rbLista.setText("Lista completa");
        rbLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbListaActionPerformed(evt);
            }
        });

        txtFiltro.setBackground(new java.awt.Color(0, 102, 102));
        txtFiltro.setForeground(new java.awt.Color(255, 255, 255));

        btnFiltrar.setBackground(new java.awt.Color(0, 102, 102));
        btnFiltrar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnFiltrar.setForeground(new java.awt.Color(255, 255, 255));
        btnFiltrar.setText("FILTRAR");
        btnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarActionPerformed(evt);
            }
        });

        tablaMascota.setBackground(new java.awt.Color(255, 255, 255));
        tablaMascota.setForeground(new java.awt.Color(0, 0, 0));
        tablaMascota.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaMascota.setSelectionBackground(new java.awt.Color(0, 102, 102));
        scrollMascota.setViewportView(tablaMascota);

        jPanel4.setBackground(new java.awt.Color(0, 102, 102));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("CONSULTA MASCOTA");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(202, 202, 202)
                .addComponent(jLabel7)
                .addContainerGap(278, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbLista)
                        .addGap(28, 28, 28)
                        .addComponent(rbPorClientes))
                    .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnConsultaHistorial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCrearHistorial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBaja, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollMascota, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbLista)
                    .addComponent(rbPorClientes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFiltrar)
                    .addComponent(btnConsultaHistorial)
                    .addComponent(btnCrearHistorial)
                    .addComponent(btnBaja))
                .addGap(18, 18, 18)
                .addComponent(scrollMascota, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultaHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaHistorialActionPerformed
        //al pulsar en consultar historial se comprueba que haya una fila seleccionada
        if (tablaMascota.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un registro de la tabla");
        } else {
            try {
                //hace invisible el menÃº
                FrPrincipal.menu.setVisible(false);
                //hace invisible la tabla
                scrollMascota.setVisible(false);
                //lo oculta todo
                resetearTodo();
                //ocultarBajaYmodificar();

                panelVisible(panelConsultaHistorial);

                //hace visible la tabla
                scrollMascota.setVisible(true);
                HistorialClinico hc;
                //recoge el mnodelo de la Jtable mascota
                DefaultTableModel m = (DefaultTableModel) tablaMascota.getModel();
                //recoge el idmascota seleccionada de la tabla
                int idmascota = (Integer.parseInt((String) m.getValueAt(tablaMascota.getSelectedRow(), 1)));
                //aÃ±ade las columnas a la Jtable historial
                String[] columnas = {"", "ID", "Juicio clÃ­nico", "Fecha", "Pagado", "ID tratamiento", "ID Mascota", "ID veterinario"};
                //recoge el modelo de la Jtable historial
                DefaultTableModel modelo = new DefaultTableModel(null, columnas);

                sc = new Socket(IP, PUERTO);

                out = new DataOutputStream(sc.getOutputStream());
                in = new DataInputStream(sc.getInputStream());
                //envÃ­a el idmascota al servidor
                out.writeUTF("[" + idmascota);
                //recibe el nÃºmero de lÃ­neas
                int num = in.readInt();

                inObj = new ObjectInputStream(sc.getInputStream());
                //bucle que recoge todas las lÃ­neas del historial y las va aÃ±adiendo al modelo
                for (int i = 0; i < num; i++) {
                    hc = (HistorialClinico) inObj.readObject();
                    String[] filas = {"", hc.getIdhistorialclinico() + "", hc.getJuicicoclinico(), hc.getFecha().toString(), hc.getPagado(),
                        hc.getIdtratamiento() + "", hc.getIdmascota() + "", hc.getIdveterinario() + ""};

                    modelo.addRow(filas);
                }
                //se aÃ±ade el modelo a la Jtable
                panelConsultaHistorial.tablaHistorial.setModel(modelo);

                //outObj.close();
                out.close();
                in.close();

                //Ajustamos el ancho de la jtable
                resizeColumnWidth(panelConsultaHistorial.tablaHistorial);
                panelConsultaHistorial.tablaHistorial.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            } catch (IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Hay problemas en la conexiÃ³n con el servidor");
            }

        }
    }//GEN-LAST:event_btnConsultaHistorialActionPerformed

    private void btnCrearHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearHistorialActionPerformed
        //al pulsar en aÃ±adir historial comprueba si ha seleccionado una fila
        if (tablaMascota.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un registro de la tabla");
        } else {
            //pone el menÃº invisible
            FrPrincipal.menu.setVisible(false);
            // se invisibiliza la tabla
            scrollMascota.setVisible(false);
            //resetea todo y rellena los combobox
            resetearTodo();
            //ocultarBajaYmodificar();
            rellenarComboboxTratamiento();
            rellenarComboboxVeterinario();
            //se visualiza la pantalla de alta historial
            panelVisible(panelAltaHistorial);
            //se recoge el modelo de la tabla
            DefaultTableModel m = (DefaultTableModel) tablaMascota.getModel();
            //se guarda el idmascota en el label superior 
            panelAltaHistorial.lblIdMascota.setText((String) m.getValueAt(tablaMascota.getSelectedRow(), 1));
        }
    }//GEN-LAST:event_btnCrearHistorialActionPerformed

    private void btnBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBajaActionPerformed
        //al pulsar en el botÃ³n baja se comprueba que haya una fila seleccionada
        if (tablaMascota.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un registro de la tabla");
        } else {
            //se recoge el modelo dela tabla
            DefaultTableModel m = (DefaultTableModel) tablaMascota.getModel();
            //se recoge el idmascota de la fila seleccioanda
            int idmascota = (Integer.parseInt((String) m.getValueAt(tablaMascota.getSelectedRow(), 1)));

            try {
                sc = new Socket(IP, PUERTO);

                out = new DataOutputStream(sc.getOutputStream());
                //se envÃ­a el idmascota al servidor para que la elimine
                //con ello se eliminarÃ¡ tambiÃ©n todo su historial
                out.writeUTF("/" + idmascota);

                JOptionPane.showMessageDialog(null, "Paciente eliminado");

                out.close();
                // se borra la fila del modelo y se vuelve a aÃ±adir a la jtable
                m.removeRow(tablaMascota.getSelectedRow());
                tablaMascota.setModel(m);

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Hay problemas en la conexiÃ³n con el servidor");
            }
        }

    }//GEN-LAST:event_btnBajaActionPerformed

    private void rbPorClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPorClientesActionPerformed
        //al seleccionar el radiobutton por clientes, se pondrÃ¡n los botones
        //baja, crear y consultar historial a false
        btnBaja.setVisible(false);
        btnConsultaHistorial.setVisible(false);
        btnCrearHistorial.setVisible(false);
        txtFiltro.setVisible(true);
        btnFiltrar.setVisible(true);
        txtFiltro.setText("");

        //ocultarBajaYmodificar();
    }//GEN-LAST:event_rbPorClientesActionPerformed

    private void rbListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbListaActionPerformed
        //al seleccionar el radiobutton lista, se pondrÃ¡n los botones
        //baja, crear y consultar historial a false
        btnBaja.setVisible(false);
        txtFiltro.setVisible(false);
        btnConsultaHistorial.setVisible(false);
        btnCrearHistorial.setVisible(false);
        btnFiltrar.setVisible(true);
        txtFiltro.setText("");

        //ocultarBajaYmodificar();
    }//GEN-LAST:event_rbListaActionPerformed

    private void btnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarActionPerformed
        //al pulsar en filtrar comprueba que campo filtro este visible y vacÃ­o para mostrar un mnesjae
        if (txtFiltro.isVisible() && txtFiltro.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "No hay nada por lo que filtrar, has dejado el campo vacÃ­o");

        } else {
            //si no, hace visible los botones de baja, crear y consultar historial
            btnBaja.setVisible(true);
            btnCrearHistorial.setVisible(true);
            btnConsultaHistorial.setVisible(true);

            //si el radiobutton lista estÃ¡ seleccionado la tabla se harÃ¡ visible y se cargarÃ¡n los datos de las mascotas en la tabla
            if (rbLista.isSelected()) {

                mostrarListaMascota();

            } //si el radiobutton por clientes estÃ¡ seleccionado la tabla se harÃ¡ visible y se cargarÃ¡n los datos por de las
            //mascotas por clientes en la tabla
            else if (rbPorClientes.isSelected()) {

                mostrarListaMascotaPorCliente();

            }
        }
    }//GEN-LAST:event_btnFiltrarActionPerformed

    //---------------- MÃ©todo para mostrar lista completa de mascotas ---------------
    public void mostrarListaMascota() {
        //hago visible la tabla mascota
        scrollMascota.setVisible(true);

        Mascota m;
        //creo las columnas de la tabla
        String[] columnas = {"", "ID", "Numero de chip", "Nombre", "AÃ±o de nacimiento", "especie", "peso", "ID Cliente"};
        //recojo el modelo y le aÃ±ado las columnas
        DefaultTableModel modelo = new DefaultTableModel(null, columnas);

        try {
            sc = new Socket(IP, PUERTO);

            out = new DataOutputStream(sc.getOutputStream());
            in = new DataInputStream(sc.getInputStream());
            //envÃ­o un mensaje al servidor 
            out.writeUTF("listamascota");
            //recojo el nÃºmero de lÃ­neas o de mascotas
            int num = in.readInt();
            //si es mayor a 0 entra
            if (num > 0) {
                //hago la tabla visible y los botones
                scrollMascota.setVisible(true);
                btnBaja.setVisible(true);
                btnCrearHistorial.setVisible(true);

                inObj = new ObjectInputStream(sc.getInputStream());
                //bucle para ir aÃ±adiendo filas al modelo
                for (int i = 0; i < num; i++) {
                    m = (Mascota) inObj.readObject();
                    String[] filas = {"", String.valueOf(m.getIdmascota()), m.getNumerochip(), m.getNombre(), String.valueOf(m.getAnionacimiento()), m.getEspecie(),
                        String.valueOf(m.getPeso()), String.valueOf(m.getIdcliente())};

                    modelo.addRow(filas);
                }
                //se aÃ±ade el modelo a la tabla
                tablaMascota.setModel(modelo);

                //Ajustamos el ancho de la jtable
                resizeColumnWidth(tablaMascota);
                tablaMascota.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            } else {
                scrollMascota.setVisible(false);
                btnBaja.setVisible(false);
                btnCrearHistorial.setVisible(false);
                JOptionPane.showMessageDialog(null, "No hay datos que mostrar");
            }

            out.close();
            in.close();

        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Hay problemas en la conexiÃ³n con el servidor");
        }
    }

    //---------------- MÃ©todo para mostrar lista de mascotas por cliente ---------------
    public void mostrarListaMascotaPorCliente() {
        //*** exactamente igual que el anterior mÃ©todo pero le envÃ­a al servidor
        // el DNI del cliente para que traigan las mascotas de un cliente determinado ***//
        Mascota m;

        String[] columnas = {"", "ID", "Numero de chip", "Nombre", "AÃ±o de nacimiento", "especie", "peso", "ID Cliente"};
        DefaultTableModel modelo = new DefaultTableModel(null, columnas);

        try {
            sc = new Socket(IP, PUERTO);

            out = new DataOutputStream(sc.getOutputStream());
            in = new DataInputStream(sc.getInputStream());
            out.writeUTF("Ã§" + txtFiltro.getText());
            int num = in.readInt();

            if (num > 0) {

                scrollMascota.setVisible(true);
                btnBaja.setVisible(true);
                btnCrearHistorial.setVisible(true);

                inObj = new ObjectInputStream(sc.getInputStream());

                for (int i = 0; i < num; i++) {
                    m = (Mascota) inObj.readObject();
                    String[] filas = {"", String.valueOf(m.getIdmascota()), m.getNumerochip(), m.getNombre(), String.valueOf(m.getAnionacimiento()), m.getEspecie(),
                        String.valueOf(m.getPeso()), String.valueOf(m.getIdcliente())};

                    modelo.addRow(filas);
                }

                tablaMascota.setModel(modelo);

                //Ajustamos el ancho de la jtable
                resizeColumnWidth(tablaMascota);
                tablaMascota.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            } else {
                scrollMascota.setVisible(false);
                btnBaja.setVisible(false);
                btnCrearHistorial.setVisible(false);
                btnConsultaHistorial.setVisible(false);
                txtFiltro.setText("");
                JOptionPane.showMessageDialog(null, "No hay datos que mostrar");
            }

            out.close();
            in.close();

        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Hay problemas en la conexiÃ³n con el servidor");
        }
    }

//--------------- MÃ©todo para hacer visible uno de los paneles ---------------
    public void panelVisible(JPanel p) {
        panelBienvenida.setVisible(false);
        panelAltaCliente.setVisible(false);
        panelAltaMascota.setVisible(false);
        panelConsultaMascota.setVisible(false);
        panelConsultaCliente.setVisible(false);
        panelConsultaCita.setVisible(false);
        panelDetalleCita.setVisible(false);
        panelConsultaHistorial.setVisible(false);
        panelAltaHistorial.setVisible(false);
        panelFactura.setVisible(false);

        p.setVisible(true);
    }

    //--------- MÃ©todo para poner todo vacÃ­o como al iniciar ---------------
    public void resetearTodo() {

        buttonGroupMascota.clearSelection();
        txtFiltro.setVisible(false);
        txtFiltro.setText("");
        btnFiltrar.setVisible(false);

        panelAltaHistorial.rbNo.setSelected(true);
        panelAltaHistorial.cbTratamiento.setSelectedIndex(0);
        panelAltaHistorial.txaJuicioClinico.setText("");
    }

    //--------------- MÃ©todo para rellenar el combobox tratamientos --------------
    public void rellenarComboboxTratamiento() {
        try {
            sc = new Socket(IP, PUERTO);

            out = new DataOutputStream(sc.getOutputStream());
            in = new DataInputStream(sc.getInputStream());
            //envÃ­a un mensaje al servidor para que traiga todos los tratamientos
            out.writeUTF("rellenarcomboboxtratamiento");
            //se borra los items del combobox
            panelAltaHistorial.cbTratamiento.removeAllItems();
            //se recoge el nÃºmero de tratamientos que hay
            int num = in.readInt();
            //bucle para ir aÃ±adiendo cada tratamiento al combobox
            for (int i = 0; i < num; i++) {
                panelAltaHistorial.cbTratamiento.addItem(in.readUTF());
            }

            out.close();
            in.close();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Hay problemas en la conexiÃ³n con el servidor");
        }
    }

    //-------------- MÃ©todo para rellenar el combobox veterinarios -------------
    public void rellenarComboboxVeterinario() {
        try {
            sc = new Socket(IP, PUERTO);

            out = new DataOutputStream(sc.getOutputStream());
            in = new DataInputStream(sc.getInputStream());
            //envÃ­a un mensaje al servidor para que traiga todos los veterinarios
            out.writeUTF("rellenarcomboboxveterinario");
            //se borra los items del combobox
            panelAltaHistorial.cbVeterinario.removeAllItems();
            //se recoge el nÃºmero de veterinarios que hay
            int num = in.readInt();
            //bucle para ir aÃ±adiendo cada veterinario al combobox
            for (int i = 0; i < num; i++) {
                panelAltaHistorial.cbVeterinario.addItem(in.readUTF());
            }

            out.close();
            in.close();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Hay problemas en la conexiÃ³n con el servidor");
        }
    }

    //------------ MÃ©todo para ajustar el ancho de la jtable -------------
    private void resizeColumnWidth(JTable table) {
        //Se obtiene el modelo de la columna
        TableColumnModel columnModel = table.getColumnModel();
        //Se obtiene el total de las columnas
        for (int column = 0; column < table.getColumnCount(); column++) {
            //Establecemos un valor minimo para el ancho de la columna
            int width = 150; //Min Width
            //Obtenemos el numero de filas de la tabla
            for (int row = 0; row < table.getRowCount(); row++) {
                //Obtenemos el renderizador de la tabla
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                //Creamos un objeto para preparar el renderer
                Component comp = table.prepareRenderer(renderer, row, column);
                //Establecemos el width segun el valor maximo del ancho de la columna
                width = Math.max(comp.getPreferredSize().width + 1, width);

            }
            //Se establece una condicion para no sobrepasar el valor de 300
            //Esto es Opcional
            if (width > 300) {
                width = 300;
            }
            //Se establece el ancho de la columna
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnBaja;
    public javax.swing.JButton btnConsultaHistorial;
    public javax.swing.JButton btnCrearHistorial;
    public javax.swing.JButton btnFiltrar;
    public javax.swing.ButtonGroup buttonGroupMascota;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton rbLista;
    public javax.swing.JRadioButton rbPorClientes;
    public javax.swing.JScrollPane scrollMascota;
    public javax.swing.JTable tablaMascota;
    public javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
}
