/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package principal;

import beans.HistorialClinico;
import java.awt.Component;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.Socket;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import static principal.FrPrincipal.IP;
import static principal.FrPrincipal.PUERTO;
import static principal.FrPrincipal.in;
import static principal.FrPrincipal.inObj;
import static principal.FrPrincipal.out;
import static principal.FrPrincipal.panelAltaCliente;
import static principal.FrPrincipal.panelAltaHistorial;
import static principal.FrPrincipal.panelAltaMascota;
import static principal.FrPrincipal.panelBienvenida;
import static principal.FrPrincipal.panelConsultaCita;
import static principal.FrPrincipal.sc;
import static principal.FrPrincipal.panelConsultaCliente;
import static principal.FrPrincipal.panelConsultaHistorial;
import static principal.FrPrincipal.panelConsultaMascota;
import static principal.FrPrincipal.panelDetalleCita;
import static principal.FrPrincipal.panelFactura;

/**
 *
 * @author Alex
 */
public class PanelConsultaHistorial extends javax.swing.JPanel {

    public PanelConsultaHistorial() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnVolver = new javax.swing.JButton();
        btnInforme = new javax.swing.JButton();
        scrollHistorial = new javax.swing.JScrollPane();
        tablaHistorial = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        btnPagar = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));

        btnVolver.setBackground(new java.awt.Color(0, 102, 102));
        btnVolver.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnVolver.setForeground(new java.awt.Color(255, 255, 255));
        btnVolver.setText("VOLVER");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnInforme.setBackground(new java.awt.Color(0, 102, 102));
        btnInforme.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnInforme.setForeground(new java.awt.Color(255, 255, 255));
        btnInforme.setText("GENERAR INFORME");
        btnInforme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInformeActionPerformed(evt);
            }
        });

        tablaHistorial.setBackground(new java.awt.Color(255, 255, 255));
        tablaHistorial.setForeground(new java.awt.Color(0, 0, 0));
        tablaHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaHistorial.setSelectionBackground(new java.awt.Color(0, 102, 102));
        scrollHistorial.setViewportView(tablaHistorial);

        jPanel4.setBackground(new java.awt.Color(0, 102, 102));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("HISTORIAL");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(242, 242, 242)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        btnPagar.setBackground(new java.awt.Color(0, 102, 102));
        btnPagar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnPagar.setForeground(new java.awt.Color(255, 255, 255));
        btnPagar.setText("MARCAR COMO PAGADO");
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnInforme)
                        .addGap(39, 39, 39)
                        .addComponent(btnVolver)
                        .addGap(39, 39, 39)
                        .addComponent(btnPagar)
                        .addGap(183, 183, 183)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInforme)
                    .addComponent(btnVolver)
                    .addComponent(btnPagar))
                .addGap(18, 18, 18)
                .addComponent(scrollHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        //para volver pone el menú visible y muestra el panel de consulta mascota
        FrPrincipal.menu.setVisible(true);
        panelVisible(panelConsultaMascota);
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnInformeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInformeActionPerformed

        try {
            sc = new Socket(IP, PUERTO);

            out = new DataOutputStream(sc.getOutputStream());
            in = new DataInputStream(sc.getInputStream());
            //recoge el modelo de la tabla
            DefaultTableModel m = (DefaultTableModel) panelConsultaMascota.tablaMascota.getModel();
            //guarda el idmascota de la tabla
            int idmascota = (Integer.parseInt((String) m.getValueAt(panelConsultaMascota.tablaMascota.getSelectedRow(), 1)));
            //envía el idmascota al servidor
            out.writeUTF("$" + idmascota);
            //lee el mensaje que recibe del servidor
            String mensaje = in.readUTF();
            //si el mensaje no está vacío entra
            if (!mensaje.equals("")) {

                inObj = new ObjectInputStream(sc.getInputStream());
                //convierte el objeto recibido que es un fichero en bytes
                byte[] b = (byte[]) inObj.readObject();
                //guarda el fichero dando opción a elegir donde se quiere guardar y con que nombre
                //aunque tiene un nombre por defecto
                //-----------------------------------------------------------------
                JFileChooser guardar = new JFileChooser();

                guardar.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

                File archivo = new File(mensaje);
                guardar.setSelectedFile(new File(mensaje));
                guardar.showDialog(null, "Guardar archivo");
                archivo = guardar.getSelectedFile();

                if (archivo.getName().endsWith(".pdf")) {

                    FileOutputStream salida = new FileOutputStream(archivo);

                    salida.write(b);
                    salida.close();
                }
                //-----------------------------------------------------------------
                inObj.close();
                out.close();
                in.close();
            } else {
                JOptionPane.showMessageDialog(null, "Esta mascota tiene el historial vacío");
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Fallo en la conexión con el servidor");
        }


    }//GEN-LAST:event_btnInformeActionPerformed

    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
        if (tablaHistorial.getSelectedRow() < 1) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un registro de la tabla");
        } else {
            try {
                sc = new Socket(IP, PUERTO);

                out = new DataOutputStream(sc.getOutputStream());
                in = new DataInputStream(sc.getInputStream());
                //recoge el modelo de la tabla
                DefaultTableModel m = (DefaultTableModel) panelConsultaHistorial.tablaHistorial.getModel();
                //guarda el idhistorial de la tabla
                int idhistorial = (Integer.parseInt((String) m.getValueAt(panelConsultaHistorial.tablaHistorial.getSelectedRow(), 1)));
                //borra todo lo que contiene la tabla
                tablaHistorial.removeAll();
                //añade las columnas al modelo de la tabla
                String[] columnas = {"", "ID", "Juicio clínico", "Fecha", "Pagado", "ID tratamiento", "ID Mascota", "ID veterinario"};
                DefaultTableModel modelo = new DefaultTableModel(null, columnas);
                //envía al servidor el idhistorial y el idmascota
                out.writeUTF("¿" + idhistorial + "+" + m.getValueAt(tablaHistorial.getSelectedRow(), 6));
                //recibe el número de líneas
                int num = in.readInt();
                inObj = new ObjectInputStream(sc.getInputStream());
                //bucle para guardar lineas de historial de una mascota
                for (int i = 0; i < num; i++) {
                    HistorialClinico hc = (HistorialClinico) inObj.readObject();

                    String[] filas = {"", hc.getIdhistorialclinico() + "", hc.getJuicicoclinico(), hc.getFecha().toString(), hc.getPagado(),
                        hc.getIdtratamiento() + "", hc.getIdmascota() + "", hc.getIdveterinario() + ""};
                    //se añade las filas al modelo
                    modelo.addRow(filas);

                }
                //se añade el modelo a la tabla
                tablaHistorial.setModel(modelo);

                //Ajustamos el ancho de la jtable
                resizeColumnWidth(tablaHistorial);
                tablaHistorial.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

                inObj.close();
                out.close();
                in.close();

            } catch (IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Fallo en la conexión con el servidor");
            }
        }
    }//GEN-LAST:event_btnPagarActionPerformed

//--------------- Método para hacer visible uno de los paneles ---------------
    public void panelVisible(JPanel p) {
        panelBienvenida.setVisible(false);
        panelAltaCliente.setVisible(false);
        panelAltaMascota.setVisible(false);
        panelConsultaMascota.setVisible(false);
        panelConsultaCliente.setVisible(false);
        panelConsultaCita.setVisible(false);
        panelDetalleCita.setVisible(false);
        panelConsultaHistorial.setVisible(false);
        panelAltaHistorial.setVisible(false);
        panelFactura.setVisible(false);

        p.setVisible(true);
    }

    //------------ Método para ajustar el ancho de la jtable -------------
    private void resizeColumnWidth(JTable table) {
        //Se obtiene el modelo de la columna
        TableColumnModel columnModel = table.getColumnModel();
        //Se obtiene el total de las columnas
        for (int column = 0; column < table.getColumnCount(); column++) {
            //Establecemos un valor minimo para el ancho de la columna
            int width = 150; //Min Width
            //Obtenemos el numero de filas de la tabla
            for (int row = 0; row < table.getRowCount(); row++) {
                //Obtenemos el renderizador de la tabla
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                //Creamos un objeto para preparar el renderer
                Component comp = table.prepareRenderer(renderer, row, column);
                //Establecemos el width segun el valor maximo del ancho de la columna
                width = Math.max(comp.getPreferredSize().width + 1, width);

            }
            //Se establece una condicion para no sobrepasar el valor de 300
            //Esto es Opcional
            if (width > 300) {
                width = 300;
            }
            //Se establece el ancho de la columna
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInforme;
    private javax.swing.JButton btnPagar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel4;
    public javax.swing.JScrollPane scrollHistorial;
    public javax.swing.JTable tablaHistorial;
    // End of variables declaration//GEN-END:variables
}
