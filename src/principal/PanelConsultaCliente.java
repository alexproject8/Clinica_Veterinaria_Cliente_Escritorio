/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package principal;

import beans.Cliente;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Component;
import java.awt.Desktop;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import static principal.FrPrincipal.IP;
import static principal.FrPrincipal.PUERTO;
import static principal.FrPrincipal.in;
import static principal.FrPrincipal.inObj;
import static principal.FrPrincipal.out;
import static principal.FrPrincipal.panelAltaCliente;
import static principal.FrPrincipal.panelAltaMascota;
import static principal.FrPrincipal.panelConsultaCita;
import static principal.FrPrincipal.panelConsultaCliente;
import static principal.FrPrincipal.panelConsultaMascota;
import static principal.FrPrincipal.panelDetalleCita;
import static principal.FrPrincipal.panelFactura;
import static principal.FrPrincipal.sc;
import static principal.FrPrincipal.panelConsultaHistorial;
import static principal.FrPrincipal.panelAltaHistorial;
import static principal.FrPrincipal.panelBienvenida;

/**
 *
 * @author Alex
 */
public class PanelConsultaCliente extends javax.swing.JPanel {

    public PanelConsultaCliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupCliente = new javax.swing.ButtonGroup();
        scrollCliente = new javax.swing.JScrollPane();
        tablaCliente = new javax.swing.JTable();
        calendario = new com.toedter.calendar.JDateChooser();
        lblFechaBaja = new javax.swing.JLabel();
        btnModificarCliente = new javax.swing.JButton();
        btnFactura = new javax.swing.JButton();
        btnBaja = new javax.swing.JButton();
        btnFiltrar = new javax.swing.JButton();
        txtFiltro = new javax.swing.JTextField();
        rbNombre = new javax.swing.JRadioButton();
        rbApellidos = new javax.swing.JRadioButton();
        rbPoblacion = new javax.swing.JRadioButton();
        rbDadosBaja = new javax.swing.JRadioButton();
        rbListado = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        btnImprimir = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));

        tablaCliente.setBackground(new java.awt.Color(255, 255, 255));
        tablaCliente.setForeground(new java.awt.Color(0, 0, 0));
        tablaCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaCliente.setSelectionBackground(new java.awt.Color(0, 102, 102));
        scrollCliente.setViewportView(tablaCliente);

        calendario.setBackground(new java.awt.Color(0, 204, 204));
        calendario.setForeground(new java.awt.Color(255, 255, 255));

        lblFechaBaja.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        lblFechaBaja.setForeground(new java.awt.Color(255, 255, 255));
        lblFechaBaja.setText("Fecha de baja:");

        btnModificarCliente.setBackground(new java.awt.Color(0, 102, 102));
        btnModificarCliente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnModificarCliente.setForeground(new java.awt.Color(255, 255, 255));
        btnModificarCliente.setText("MODIFICAR");
        btnModificarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarClienteActionPerformed(evt);
            }
        });

        btnFactura.setBackground(new java.awt.Color(0, 102, 102));
        btnFactura.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnFactura.setForeground(new java.awt.Color(255, 255, 255));
        btnFactura.setText("GENERAR FACTURA");
        btnFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFacturaActionPerformed(evt);
            }
        });

        btnBaja.setBackground(new java.awt.Color(0, 102, 102));
        btnBaja.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBaja.setForeground(new java.awt.Color(255, 255, 255));
        btnBaja.setText("BAJA");
        btnBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBajaActionPerformed(evt);
            }
        });

        btnFiltrar.setBackground(new java.awt.Color(0, 102, 102));
        btnFiltrar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnFiltrar.setForeground(new java.awt.Color(255, 255, 255));
        btnFiltrar.setText("FILTRAR");
        btnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarActionPerformed(evt);
            }
        });

        txtFiltro.setBackground(new java.awt.Color(0, 102, 102));
        txtFiltro.setForeground(new java.awt.Color(255, 255, 255));

        rbNombre.setBackground(new java.awt.Color(0, 153, 153));
        buttonGroupCliente.add(rbNombre);
        rbNombre.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        rbNombre.setForeground(new java.awt.Color(255, 255, 255));
        rbNombre.setText("Nombre");
        rbNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNombreActionPerformed(evt);
            }
        });

        rbApellidos.setBackground(new java.awt.Color(0, 153, 153));
        buttonGroupCliente.add(rbApellidos);
        rbApellidos.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        rbApellidos.setForeground(new java.awt.Color(255, 255, 255));
        rbApellidos.setText("Apellidos");
        rbApellidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbApellidosActionPerformed(evt);
            }
        });

        rbPoblacion.setBackground(new java.awt.Color(0, 153, 153));
        buttonGroupCliente.add(rbPoblacion);
        rbPoblacion.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        rbPoblacion.setForeground(new java.awt.Color(255, 255, 255));
        rbPoblacion.setText("Poblaci√≥n");
        rbPoblacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPoblacionActionPerformed(evt);
            }
        });

        rbDadosBaja.setBackground(new java.awt.Color(0, 153, 153));
        buttonGroupCliente.add(rbDadosBaja);
        rbDadosBaja.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        rbDadosBaja.setForeground(new java.awt.Color(255, 255, 255));
        rbDadosBaja.setText("Dados de baja");
        rbDadosBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDadosBajaActionPerformed(evt);
            }
        });

        rbListado.setBackground(new java.awt.Color(0, 153, 153));
        buttonGroupCliente.add(rbListado);
        rbListado.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        rbListado.setForeground(new java.awt.Color(255, 255, 255));
        rbListado.setText("Listado completo");
        rbListado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbListadoActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(0, 102, 102));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("CONSULTA CLIENTE");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(202, 202, 202)
                .addComponent(jLabel7)
                .addContainerGap(365, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        btnImprimir.setBackground(new java.awt.Color(0, 102, 102));
        btnImprimir.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnImprimir.setForeground(new java.awt.Color(255, 255, 255));
        btnImprimir.setText("IMPRIMIR LISTA");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnBaja, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblFechaBaja))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(calendario, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnModificarCliente)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnFactura)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rbNombre)
                                        .addGap(18, 18, 18)
                                        .addComponent(rbApellidos)
                                        .addGap(18, 18, 18)
                                        .addComponent(rbPoblacion)
                                        .addGap(18, 18, 18)
                                        .addComponent(rbDadosBaja)
                                        .addGap(18, 18, 18)
                                        .addComponent(rbListado))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnFiltrar))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(scrollCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbApellidos)
                    .addComponent(rbPoblacion)
                    .addComponent(rbDadosBaja)
                    .addComponent(rbListado)
                    .addComponent(rbNombre))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFiltrar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBaja)
                    .addComponent(btnModificarCliente)
                    .addComponent(btnFactura)
                    .addComponent(btnImprimir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFechaBaja)
                    .addComponent(calendario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(scrollCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnModificarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarClienteActionPerformed
        //al pulsar en modificar cliente comprueba que haya una fila seleccionada
        if (tablaCliente.getSelectedRow() == -1) {

            JOptionPane.showMessageDialog(null, "Debes seleccionar un registro de la tabla");

        } else {
            //si la hay hace invisible el men√∫ y cambia el texto del bot√≥n del panel alta cliente
            FrPrincipal.menu.setVisible(false);
            panelAltaCliente.btnGuardarCliente.setText("GUARDAR");
            panelAltaCliente.tituloAlta.setText("MODIFICAR CLIENTE");
            //el boleano se pondr√° a faslo
            panelAltaCliente.vieneDeAlta = false;
            //la tabla se pondr√° invisible
            scrollCliente.setVisible(false);
            //se resetear√° todo
            resetearTodo();
            // los campos no modificables estar√°n inabilitados
            panelAltaCliente.txtNombreCliente.setEnabled(false);
            panelAltaCliente.txtApellidos.setEnabled(false);
            panelAltaCliente.txtDniCliente.setEnabled(false);
            //se recoger√° el modelo de la tabla
            DefaultTableModel m = (DefaultTableModel) tablaCliente.getModel();
            //se le asiganr√° los datos a los campos del panel alta cliente
            panelAltaCliente.txtDniCliente.setText((String) m.getValueAt(tablaCliente.getSelectedRow(), 1));
            panelAltaCliente.txtNombreCliente.setText((String) m.getValueAt(tablaCliente.getSelectedRow(), 2));
            panelAltaCliente.txtApellidos.setText((String) m.getValueAt(tablaCliente.getSelectedRow(), 3));
            panelAltaCliente.txtDireccion.setText((String) m.getValueAt(tablaCliente.getSelectedRow(), 4));
            panelAltaCliente.txtPoblacion.setText((String) m.getValueAt(tablaCliente.getSelectedRow(), 5));
            panelAltaCliente.txtTlf.setText((String) m.getValueAt(tablaCliente.getSelectedRow(), 6));
            panelAltaCliente.txtEmail.setText((String) m.getValueAt(tablaCliente.getSelectedRow(), 7));
            //se har√° visible el panel alta cliente
            panelVisible(panelAltaCliente);

        }
    }//GEN-LAST:event_btnModificarClienteActionPerformed

    private void btnFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFacturaActionPerformed
        //al pulsar en el bot√≥ facturar comprueba que haya seleccionado una fila de la tabla
        if (tablaCliente.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un registro de la tabla");
        } else {
            //si est√° seleccionada el men√∫ se pone invisible
            FrPrincipal.menu.setVisible(false);
            //se visualiza el panel de factura
            panelVisible(panelFactura);
            //se ponen todos los campos del panel factur vac√≠os o nulos
            panelFactura.txtEmpresa.setText("");
            panelFactura.txtDireccionEmpresa.setText("");
            panelFactura.txtCiudadEmpresa.setText("");
            panelFactura.txtTlfEmpresa.setText("");
            calendario.setDate(null);
            panelFactura.calendario3.setDate(null);
        }
    }//GEN-LAST:event_btnFacturaActionPerformed

    private void btnBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBajaActionPerformed
        //para la baja se comprueba que haya una fila seleccionada
        if (tablaCliente.getSelectedRow() == -1) {

            JOptionPane.showMessageDialog(null, "Debes seleccionar un registro de la tabla");

        } else {
            //si hay una fila seleccionada se recoge el modelo de la jtabla cliente
            DefaultTableModel m = (DefaultTableModel) tablaCliente.getModel();
            //si est√° dado de baja muestra un mensaje
            if (!m.getValueAt(tablaCliente.getSelectedRow(), 8).equals("No")) {
                JOptionPane.showMessageDialog(null, "El cliente seleccionado ya est√° dado de baja");
            }//si la fecha del calendario es nulo muestra un mensaje 
            else if (calendario.getDate() == null) {

                JOptionPane.showMessageDialog(null, "Debes seleccionar una fecha");
                //si la fecha es menor o igual a la actual muestra un mensaje
            } else if (calendario.getDate().compareTo(new Date()) < 0) {

                JOptionPane.showMessageDialog(null, "La fecha debe ser igual o mayor a la actual");

            } else {

                try {
                    FrPrincipal.sc = new Socket(IP, PUERTO);

                    FrPrincipal.out = new DataOutputStream(sc.getOutputStream());
                    FrPrincipal.in = new DataInputStream(sc.getInputStream());
                    //si todo lo anterior no se cumple entra por aqu√≠ y env√≠a un mensaje al servidor con el ID del cliente y la fecha
                    //con esto le asigna una fecha a un cliente y queda dado de baja
                    FrPrincipal.out.writeUTF("'" + m.getValueAt(tablaCliente.getSelectedRow(), 0) + "+" + calendario.getDate().getTime());

                    FrPrincipal.out.close();
                    FrPrincipal.in.close();
                    //le doy formato a la fecha y la guarda en el modelo de la jtabla
                    m.setValueAt(new SimpleDateFormat("dd-MM-yyyy").format(calendario.getDate()), tablaCliente.getSelectedRow(), 8);
                    //agrega el modelo a la jtabla cliente
                    tablaCliente.setModel(m);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Hay problemas en la conexi√≥n con el servidor");
                }

            }
        }

    }//GEN-LAST:event_btnBajaActionPerformed

    private void btnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarActionPerformed
        if (txtFiltro.isVisible() && txtFiltro.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "No hay nada por lo que filtrar, has dejado el campo vac√≠o");

        } else {
            //si est√° seleccinado alguno de los radiobutton de consulta mascota al pulsar en filtrar el b ot√≥n baja
            //se har√° visible

            lblFechaBaja.setVisible(true);
            calendario.setVisible(true);
            btnFactura.setVisible(true);
            btnModificarCliente.setVisible(true);
            btnBaja.setVisible(true);

            //filtro de clientes por nombre
            if (rbNombre.isSelected() == true) {

                listarClientePorNombre();

            } //filtro de clientes por apellidos
            else if (rbApellidos.isSelected() == true) {

                listarClientePorApellidos();

            } //filtro de clientes por poblacion
            else if (rbPoblacion.isSelected() == true) {

                listarClientePorPoblacion();

            } //filtro de clientes por dados de baja
            else if (rbDadosBaja.isSelected() == true) {

                listarClienteBaja();

            } //filtro de clientes listado completo
            else if (rbListado.isSelected() == true) {

                //consultaClienteVista();
                consultaClienteListaCompleta();

            }
        }
    }//GEN-LAST:event_btnFiltrarActionPerformed
    //A CONTINUACI√ìN se muestran los m√©todos de acci√≥n de los radiobutton,para todos pondr√° invisible los botones
    //excepto el de filtrar y en algunos tambi√©n pondr√° el campo de filtro visible
//------------------------------------------------------------------------------------
    private void rbNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNombreActionPerformed
        btnFiltrar.setVisible(false);
        txtFiltro.setVisible(true);
        btnFiltrar.setVisible(true);
        txtFiltro.setText("");

        ocultarBajaYmodificar();
    }//GEN-LAST:event_rbNombreActionPerformed

    private void rbApellidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbApellidosActionPerformed
        btnFiltrar.setVisible(false);
        txtFiltro.setVisible(true);
        btnFiltrar.setVisible(true);
        txtFiltro.setText("");

        ocultarBajaYmodificar();
    }//GEN-LAST:event_rbApellidosActionPerformed

    private void rbPoblacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPoblacionActionPerformed
        btnFiltrar.setVisible(false);
        txtFiltro.setVisible(true);
        btnFiltrar.setVisible(true);
        txtFiltro.setText("");

        ocultarBajaYmodificar();
    }//GEN-LAST:event_rbPoblacionActionPerformed

    private void rbDadosBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDadosBajaActionPerformed
        btnFiltrar.setVisible(false);
        txtFiltro.setVisible(false);
        btnFiltrar.setVisible(true);
        txtFiltro.setText("");

        ocultarBajaYmodificar();
    }//GEN-LAST:event_rbDadosBajaActionPerformed

    private void rbListadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbListadoActionPerformed
        btnFiltrar.setVisible(false);
        txtFiltro.setVisible(false);
        btnFiltrar.setVisible(true);
        txtFiltro.setText("");

        ocultarBajaYmodificar();
    }//GEN-LAST:event_rbListadoActionPerformed

    //Al pulsar en el bot√≥n imprimir lista se se muestra una ventana con un pdf con el que podemos imprimir la lista de clientes
    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        //si la tabla no tiene registros muestra un mensaje
        if (tablaCliente.getRowCount() < 1) {

            JOptionPane.showMessageDialog(null, "La tabla est√° vac√≠a, no hay nada que imprimir");

        } else {
            try {
                //se instancia un Document que es donde guardaremos los datos
                Document documento = new Document();

                //Para escribir en pdf le pasamos el documento y la ruta con nombre del archivo
                PdfWriter.getInstance(documento, new FileOutputStream("clientes.pdf"));

                //Instancio Paragraph para centrar y dar estilo al t√≠tulo
                Paragraph parrafo = new Paragraph();
                parrafo.setAlignment(Paragraph.ALIGN_CENTER);

                parrafo.setFont(FontFactory.getFont("Tahoma", 20, Font.BOLD, BaseColor.DARK_GRAY));
                parrafo.add("Listado de clientes\n\n\n");

                //abre el documento y a√±ade el p√°rrafo que contiene el t√≠tulo
                documento.open();
                documento.add(parrafo);

                //se instancia la tabla que se visualizar√° en el pdf
                //se le da un ancho y se a√±ade los campos (cabecera de la tabla)
                PdfPTable tabla = new PdfPTable(7);
                tabla.setWidthPercentage(100);
                tabla.addCell("ID");
                tabla.addCell("DNI");
                tabla.addCell("Nombre");
                tabla.addCell("Apellidos");
                tabla.addCell("Direcci√≥n");
                tabla.addCell("Poblaci√≥n");
                tabla.addCell("Tel√©fono");

                //Recojo el modelo de la tabla clientes y en un bucle se van a√±adiendo los datos de los clientes
                DefaultTableModel m = (DefaultTableModel) tablaCliente.getModel();
                for (int i = 0; i < tablaCliente.getRowCount(); i++) {
                    tabla.addCell((String) m.getValueAt(i, 0));
                    tabla.addCell((String) m.getValueAt(i, 1));
                    tabla.addCell((String) m.getValueAt(i, 2));
                    tabla.addCell((String) m.getValueAt(i, 3));
                    tabla.addCell((String) m.getValueAt(i, 4));
                    tabla.addCell((String) m.getValueAt(i, 5));
                    tabla.addCell((String) m.getValueAt(i, 6));
                }

                //se a√±ade la tablaPdf al documento y cierra
                documento.add(tabla);
                documento.close();

                //con el siguiente comando se abre el PDF y tenemos la opci√≥n de imprimirlo
                Desktop.getDesktop().open(new File("clientes.pdf"));

            } catch (FileNotFoundException | DocumentException ex) {
                Logger.getLogger(PanelConsultaCliente.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(PanelConsultaCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnImprimirActionPerformed
//----------------------------------------------------------------------------------------
    //---------- M√©todo para poner todos los componentes por defecto -----------------------

    public void resetearTodo() {

        buttonGroupCliente.clearSelection();
        txtFiltro.setVisible(false);
        txtFiltro.setText("");
        btnFiltrar.setVisible(false);

        panelAltaCliente.txtDniCliente.setText("");
        panelAltaCliente.txtNombreCliente.setText("");
        panelAltaCliente.txtApellidos.setText("");
        panelAltaCliente.txtTlf.setText("");
        panelAltaCliente.txtDireccion.setText("");
        panelAltaCliente.txtPoblacion.setText("");

    }

    //--------------- M√©todo para hacer visible uno de los paneles ---------------
    public void panelVisible(JPanel p) {
        panelBienvenida.setVisible(false);
        panelAltaCliente.setVisible(false);
        panelAltaMascota.setVisible(false);
        panelConsultaMascota.setVisible(false);
        panelConsultaCliente.setVisible(false);
        panelConsultaCita.setVisible(false);
        panelDetalleCita.setVisible(false);
        panelConsultaHistorial.setVisible(false);
        panelAltaHistorial.setVisible(false);
        panelFactura.setVisible(false);

        p.setVisible(true);
    }

    //---------------- M√©todo para mostrar lista de clientes por nombre ---------------
    public void listarClientePorNombre() {
        Cliente c;
        //a√±ade las columnas al modelo de la jtable cliente
        String[] columnas = {"ID", "DNI", "Nombre", "Apellidos", "Direcci√≥n", "Poblaci√≥n", "Tel√©fono", "Email", "Baja"};
        DefaultTableModel modelo = new DefaultTableModel(null, columnas);

        try {
            sc = new Socket(IP, PUERTO);

            out = new DataOutputStream(sc.getOutputStream());
            in = new DataInputStream(sc.getInputStream());
            //se le env√≠a el Nombre escrito en el campo filtro
            out.writeUTF("-" + txtFiltro.getText());
            //recoge el n√∫mero de clientes con ese nombre
            int num = in.readInt();
            //si es mayor que 0 entra
            if (num > 0) {
                //pone todos los componenets visibles
                scrollCliente.setVisible(true);
                lblFechaBaja.setVisible(true);
                calendario.setVisible(true);
                btnModificarCliente.setVisible(true);
                btnFactura.setVisible(true);
                btnBaja.setVisible(true);
                btnImprimir.setVisible(true);

                inObj = new ObjectInputStream(sc.getInputStream());

                String baja;
                //bucle que comprueba si un cliente est√° dado de baja y en caso de que no lo est√©
                //a√±adir√° a la columna correspondiente un "No" y si lo est√° a√±adir√° la fecha formateada
                for (int i = 0; i < num; i++) {
                    c = (Cliente) inObj.readObject();

                    if (c.getBaja() == null) {
                        baja = "No";
                    } else {
                        baja = new SimpleDateFormat("dd-MM-yyyy").format(c.getBaja());
                    }
                    //se van a√±adiendo las filas donde se van guardadnod los clientes al modelo
                    String[] filas = {String.valueOf(c.getIdcliente()), c.getDni(), c.getNombre(), c.getApellidos(), c.getDireccion(),
                        c.getPoblacion(), c.getTelefono(), c.getEmail(), baja};

                    modelo.addRow(filas);
                }
                //se le a√±ade a la tabla el modelo
                tablaCliente.setModel(modelo);

                //Ajustamos el ancho de la jtable
                resizeColumnWidth(tablaCliente);
                tablaCliente.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            } else {
                scrollCliente.setVisible(false);
                lblFechaBaja.setVisible(false);
                calendario.setVisible(false);
                btnModificarCliente.setVisible(false);
                btnFactura.setVisible(false);
                btnBaja.setVisible(false);
                btnImprimir.setVisible(false);
                JOptionPane.showMessageDialog(null, "No hay datos que mostrar");
            }

            out.close();
            in.close();

        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Hay problemas en la conexi√≥n con el servidor");
        }
    }

    //**Entre las barras est√°n los m√©todos similares al anterior comentado con la diferencia de que dependiendo
    //de por que filtra se le env√≠a al servidor una cosa u otra**
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //---------------- M√©todo para mostrar lista de clientes por apellidos ---------------
    public void listarClientePorApellidos() {
        Cliente c;

        String[] columnas = {"ID", "DNI", "Nombre", "Apellidos", "Direcci√≥n", "Poblaci√≥n", "Tel√©fono", "Email", "Baja"};
        DefaultTableModel modelo = new DefaultTableModel(null, columnas);

        try {
            sc = new Socket(IP, PUERTO);

            out = new DataOutputStream(sc.getOutputStream());
            in = new DataInputStream(sc.getInputStream());
            out.writeUTF("_" + txtFiltro.getText());
            int num = in.readInt();

            if (num > 0) {
                scrollCliente.setVisible(true);
                lblFechaBaja.setVisible(true);
                calendario.setVisible(true);
                btnModificarCliente.setVisible(true);
                btnFactura.setVisible(true);
                btnBaja.setVisible(true);
                btnImprimir.setVisible(true);

                inObj = new ObjectInputStream(sc.getInputStream());

                String baja;

                for (int i = 0; i < num; i++) {
                    c = (Cliente) inObj.readObject();

                    if (c.getBaja() == null) {
                        baja = "No";
                    } else {
                        baja = new SimpleDateFormat("dd-MM-yyyy").format(c.getBaja());
                    }

                    String[] filas = {String.valueOf(c.getIdcliente()), c.getDni(), c.getNombre(), c.getApellidos(), c.getDireccion(),
                        c.getPoblacion(), c.getTelefono(), c.getEmail(), baja};

                    modelo.addRow(filas);
                }

                tablaCliente.setModel(modelo);

                //Ajustamos el ancho de la jtable
                resizeColumnWidth(tablaCliente);
                tablaCliente.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            } else {
                scrollCliente.setVisible(false);
                lblFechaBaja.setVisible(false);
                calendario.setVisible(false);
                btnModificarCliente.setVisible(false);
                btnFactura.setVisible(false);
                btnBaja.setVisible(false);
                btnImprimir.setVisible(false);
                JOptionPane.showMessageDialog(null, "No hay datos que mostrar");
            }

            out.close();
            in.close();

        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Hay problemas en la conexi√≥n con el servidor");
        }
    }

    //---------------- M√©todo para mostrar lista de clientes por poblacion ---------------
    public void listarClientePorPoblacion() {
        Cliente c;

        String[] columnas = {"ID", "DNI", "Nombre", "Apellidos", "Direcci√≥n", "Poblaci√≥n", "Tel√©fono", "Email", "Baja"};
        DefaultTableModel modelo = new DefaultTableModel(null, columnas);

        try {
            sc = new Socket(IP, PUERTO);

            out = new DataOutputStream(sc.getOutputStream());
            in = new DataInputStream(sc.getInputStream());
            out.writeUTF(";" + txtFiltro.getText());
            int num = in.readInt();

            if (num > 0) {
                scrollCliente.setVisible(true);
                lblFechaBaja.setVisible(true);
                calendario.setVisible(true);
                btnModificarCliente.setVisible(true);
                btnFactura.setVisible(true);
                btnBaja.setVisible(true);
                btnImprimir.setVisible(false);

                inObj = new ObjectInputStream(sc.getInputStream());

                String baja;

                for (int i = 0; i < num; i++) {
                    c = (Cliente) inObj.readObject();

                    if (c.getBaja() == null) {
                        baja = "No";
                    } else {
                        baja = new SimpleDateFormat("dd-MM-yyyy").format(c.getBaja());
                    }

                    String[] filas = {String.valueOf(c.getIdcliente()), c.getDni(), c.getNombre(), c.getApellidos(), c.getDireccion(),
                        c.getPoblacion(), c.getTelefono(), c.getEmail(), baja};

                    modelo.addRow(filas);
                }

                tablaCliente.setModel(modelo);

                //Ajustamos el ancho de la jtable
                resizeColumnWidth(tablaCliente);
                tablaCliente.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            } else {
                scrollCliente.setVisible(false);
                lblFechaBaja.setVisible(false);
                calendario.setVisible(false);
                btnModificarCliente.setVisible(false);
                btnFactura.setVisible(false);
                btnBaja.setVisible(false);
                btnImprimir.setVisible(false);
                JOptionPane.showMessageDialog(null, "No hay datos que mostrar");
            }

            out.close();
            in.close();

        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Hay problemas en la conexi√≥n con el servidor");
        }
    }

    //---------------- M√©todo para mostrar lista de clientes dados de baja ---------------
    public void listarClienteBaja() {
        Cliente c;

        String[] columnas = {"ID", "DNI", "Nombre", "Apellidos", "Direcci√≥n", "Poblaci√≥n", "Tel√©fono", "Email", "Baja"};
        DefaultTableModel modelo = new DefaultTableModel(null, columnas);

        try {
            sc = new Socket(IP, PUERTO);

            out = new DataOutputStream(sc.getOutputStream());
            in = new DataInputStream(sc.getInputStream());
            out.writeUTF("baja");
            int num = in.readInt();

            if (num > 0) {
                scrollCliente.setVisible(true);
                lblFechaBaja.setVisible(true);
                calendario.setVisible(true);
                btnModificarCliente.setVisible(true);
                btnFactura.setVisible(true);
                btnBaja.setVisible(true);
                btnImprimir.setVisible(true);

                inObj = new ObjectInputStream(sc.getInputStream());

                String baja;

                for (int i = 0; i < num; i++) {
                    c = (Cliente) inObj.readObject();

                    if (c.getBaja() == null) {
                        baja = "No";
                    } else {
                        baja = new SimpleDateFormat("dd-MM-yyyy").format(c.getBaja());
                    }

                    String[] filas = {String.valueOf(c.getIdcliente()), c.getDni(), c.getNombre(), c.getApellidos(), c.getDireccion(),
                        c.getPoblacion(), c.getTelefono(), c.getEmail(), baja};

                    modelo.addRow(filas);
                }

                tablaCliente.setModel(modelo);

                //Ajustamos el ancho de la jtable
                resizeColumnWidth(tablaCliente);
                tablaCliente.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            } else {
                scrollCliente.setVisible(false);
                lblFechaBaja.setVisible(false);
                calendario.setVisible(false);
                btnModificarCliente.setVisible(false);
                btnFactura.setVisible(false);
                btnBaja.setVisible(false);
                btnImprimir.setVisible(false);
                JOptionPane.showMessageDialog(null, "No hay datos que mostrar");
            }

            out.close();
            in.close();

        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Hay problemas en la conexi√≥n con el servidor");
        }
    }

    //---------------- M√©todo para mostrar lista completa de clientes ---------------
    public void consultaClienteListaCompleta() {
        try {
            scrollCliente.setVisible(true);
            Cliente c;

            String[] columnas = {"ID", "DNI", "Nombre", "Apellidos", "Direcci√≥n", "Poblaci√≥n", "Tel√©fono", "Email", "Baja"};
            DefaultTableModel modelo = new DefaultTableModel(null, columnas);

            sc = new Socket(IP, PUERTO);

            out = new DataOutputStream(sc.getOutputStream());
            in = new DataInputStream(sc.getInputStream());
            out.writeUTF("listaclientes");
            int num = in.readInt();

            if (num > 0) {
                scrollCliente.setVisible(true);
                lblFechaBaja.setVisible(true);
                calendario.setVisible(true);
                btnModificarCliente.setVisible(true);
                btnFactura.setVisible(true);
                btnBaja.setVisible(true);
                btnImprimir.setVisible(true);
                
                inObj = new ObjectInputStream(sc.getInputStream());

                String baja;

                for (int i = 0; i < num; i++) {
                    c = (Cliente) inObj.readObject();

                    if (c.getBaja() == null) {
                        baja = "No";
                    } else {
                        baja = new SimpleDateFormat("dd-MM-yyyy").format(c.getBaja());
                    }

                    String[] filas = {String.valueOf(c.getIdcliente()), c.getDni(), c.getNombre(), c.getApellidos(), c.getDireccion(),
                        c.getPoblacion(), c.getTelefono(), c.getEmail(), baja};

                    modelo.addRow(filas);
                }

                tablaCliente.setModel(modelo);

                //Ajustamos el ancho de la jtable
                resizeColumnWidth(tablaCliente);
                tablaCliente.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            } else {
                scrollCliente.setVisible(false);
                lblFechaBaja.setVisible(false);
                calendario.setVisible(false);
                btnModificarCliente.setVisible(false);
                btnFactura.setVisible(false);
                btnBaja.setVisible(false);
                btnImprimir.setVisible(false);
                
                JOptionPane.showMessageDialog(null, "No hay datos que mostrar");
            }

            out.close();
            in.close();
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Hay problemas en la conexi√≥n con el servidor");
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //-------------- M√©todo para las opciones de baja y modificar ------------
    public void ocultarBajaYmodificar() {

        lblFechaBaja.setVisible(false);
        calendario.setVisible(false);
        btnModificarCliente.setVisible(false);
        btnFactura.setVisible(false);
        btnBaja.setVisible(false);
        btnImprimir.setVisible(false);
    }

    //------------ M√©todo para ajustar el ancho de la jtable -------------
    private void resizeColumnWidth(JTable table) {
        //Se obtiene el modelo de la columna
        TableColumnModel columnModel = table.getColumnModel();
        //Se obtiene el total de las columnas
        for (int column = 0; column < table.getColumnCount(); column++) {
            //Establecemos un valor minimo para el ancho de la columna
            int width = 150; //Min Width
            //Obtenemos el numero de filas de la tabla
            for (int row = 0; row < table.getRowCount(); row++) {
                //Obtenemos el renderizador de la tabla
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                //Creamos un objeto para preparar el renderer
                Component comp = table.prepareRenderer(renderer, row, column);
                //Establecemos el width segun el valor maximo del ancho de la columna
                width = Math.max(comp.getPreferredSize().width + 1, width);

            }
            //Se establece una condicion para no sobrepasar el valor de 300
            //Esto es Opcional
            if (width > 300) {
                width = 300;
            }
            //Se establece el ancho de la columna
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnBaja;
    public javax.swing.JButton btnFactura;
    public javax.swing.JButton btnFiltrar;
    public javax.swing.JButton btnImprimir;
    public javax.swing.JButton btnModificarCliente;
    public javax.swing.ButtonGroup buttonGroupCliente;
    public com.toedter.calendar.JDateChooser calendario;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel4;
    public javax.swing.JLabel lblFechaBaja;
    public javax.swing.JRadioButton rbApellidos;
    public javax.swing.JRadioButton rbDadosBaja;
    public javax.swing.JRadioButton rbListado;
    public javax.swing.JRadioButton rbNombre;
    public javax.swing.JRadioButton rbPoblacion;
    public javax.swing.JScrollPane scrollCliente;
    public javax.swing.JTable tablaCliente;
    public javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables

}
